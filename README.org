* EStore
一个Web友好的自托管ad-hoc微服务.
提供基于HTTP的Event Store.

** Quickstart
#+BEGIN_SRC sh
docker run --detach --publish 8080:8080 blackglory/estore

curl http://localhost:8080/estore/namespace/items/id/events \
  --request POST \
  --header 'Content-Type: application/json' \
  --data '{ "event": "HelloWorld" }'

curl http://localhost:8080/estore/namespace/items/id/events
# [{ "event": "HelloWorld" }]

curl http://localhost:8080/estore/namespace/items/id --request DELETE

curl http://localhost:8080/estore/namespace/items/id/events
# 404 Not Found
#+END_SRC

** Install
*** 从源代码运行
可以使用环境变量 =ESTORE_HOST= 和 =ESTORE_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/estore
cd estore
yarn install
yarn build
yarn bundle
yarn --silent start
#+END_SRC

*** Docker
#+BEGIN_SRC sh
docker run \
  --detach \
  --publish 8080:8080 \
  blackglory/estore
#+END_SRC

**** 从源代码构建
#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/estore
cd estore
yarn install
yarn docker:build
#+END_SRC

**** Recipes
***** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  estore:
    image: 'blackglory/estore'
    restart: always
    environment:
      - ESTORE_ADMIN_PASSWORD=password
    volumes:
      - 'estore-data:/data'
    ports:
      - '8080:8080'

volumes:
  estore-data:
#+END_SRC
** API
*** Public
所有API中的namespace和id都需要满足此正则表达式: =^[a-zA-Z0-9\.\-_]{0,255}$=

**** append
=POST /estore/<namespace>/items/<id>/events=

在指定项目的尾部追加以JSON表示的事件, 对结构没有限制.

可用 =If-Match= 头指定一个从0开始计数的索引号, 以实现乐观并发策略:
当追加数据时的位置与指定的索引号不符时, 返回412错误.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request POST \
  --data "$EVENT" \
  "http://localhost:8080/estore/$namespace/items/$id/events"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}/events`, {
  method: 'POST'
, body: event
})
#+END_SRC

**** get event
=GET /estore/<namespace>/items/<id>/events/<index>=

根据事件的索引获得特定事件的JSON, 返回200或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore/$namespace/items/$id/events/$index"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}/events/$index`)
#+END_SRC

**** get events
=GET /estore/<namespace>/items/<id>/events=

按JSON数组结构返回项目内的所有事件, 返回200或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}`)
#+END_SRC

**** get size
=GET /estore/<namespace>/items/<id>/size=

获得指定项目内包含的事件数量, 该值等同于下一个事件插入时的索引号.
对于不存在的项目, 它会返回0.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore/$namespace/items/$id/size"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}/size`)
#+END_SRC

**** has
=HEAD /estore/<namespace>/items/<id>=

检测指定项目是否存在, 返回204或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request HEAD \
  "http://localhost:8080/estore/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}`, {
  method: 'HEAD'
})
#+END_SRC

**** delete
=DELETE /estore/<namespace>/items/<id>=

删除特定项目, 返回204或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/estore/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}`, {
  method: 'DELETE'
})
#+END_SRC

**** clear
=DELETE /estore/<namespace>=

清空estore内的所有items.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/estore/$db"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${db}`, {
  method: 'DELETE'
})
#+END_SRC

**** get all item ids
=GET /estore/<namespace>/items=

获取所有项目的id, 返回 =string[]=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore/$namespace/items"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items`).then(res => res.json())
#+END_SRC

**** get all namespaces
=GET /estore=

列出所有的namespaces.

输出JSON =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/estore'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/estore').then(res => res.json())
#+END_SRC

**** stats
=GET /estore/<namespace>/stats=

输出JSON:
#+BEGIN_SRC typescript
{
  namespace: string
  items: number
}
#+END_SRC

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore`).then(res => res.json())
#+END_SRC

** 限制Payload大小
设置环境变量 =ESTORE_PAYLOAD_LIMIT= 可限制服务接受的单个请求的Payload字节数, 默认值为1048576(1MB).

设置环境变量 =ESTORE_APPEND_PAYLOAD_LIMIT= 可限制append接受的单个请求的Payload字节数,
默认值继承自 =ESTORE_PAYLOAD_LIMIT=.
