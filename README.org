* EStore
一个Web友好的自托管ad-hoc微服务.
提供基于HTTP的Event Store,
带有基于token和名单的访问控制策略,
支持JSON Schema.

** Quickstart
#+BEGIN_SRC sh
docker run --detach --publish 8080:8080 blackglory/estore

curl http://localhost:8080/estore/namespace/items/id/events \
  --request POST \
  --header 'Content-Type: application/json' \
  --data '{ "event": "HelloWorld" }'

curl http://localhost:8080/estore/namespace/items/id/events
# [{ "event": "HelloWorld" }]

curl http://localhost:8080/estore/namespace/items/id --request DELETE

curl http://localhost:8080/estore/namespace/items/id/events
# 404 Not Found
#+END_SRC

** Install
*** 从源代码运行
可以使用环境变量 =ESTORE_HOST= 和 =ESTORE_PORT= 决定服务器监听的地址和端口, 默认值为localhost和8080.

#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/estore
cd estore
yarn install
yarn build
yarn --silent start
#+END_SRC

*** Docker
#+BEGIN_SRC sh
docker run \
  --detach \
  --publish 8080:8080 \
  blackglory/estore
#+END_SRC

**** 从源代码构建
#+BEGIN_SRC sh
git clone https://github.com/BlackGlory/estore
cd estore
yarn install
yarn docker:build
#+END_SRC

**** Recipes
***** 公开服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  estore:
    image: 'blackglory/estore'
    restart: always
    volumes:
      - 'estore-data:/data'
    ports:
      - '8080:8080'

volumes:
  estore-data:
#+END_SRC

***** 私人服务器
****** docker-compose.yml
#+BEGIN_SRC yaml
version: '3.8'

services:
  estore:
    image: 'blackglory/estore'
    restart: always
    environment:
      - ESTORE_ADMIN_PASSWORD=password
      - ESTORE_TOKEN_BASED_ACCESS_CONTROL=true
      - ESTORE_WRITE_TOKEN_REQUIRED=true
      - ESTORE_READ_TOKEN_REQUIRED=true
      - ESTORE_DELETE_TOKEN_REQUIRED=true
    volumes:
      - 'estore-data:/data'
    ports:
      - '8080:8080'

volumes:
  estore-data:
#+END_SRC
** API
*** Public
所有API中的namespace和id都需要满足此正则表达式: =^[a-zA-Z0-9\.\-_]{0,255}$=

**** append
=POST /estore/<namespace>/items/<id>/events=

在指定项目的尾部追加以JSON表示的事件, 对结构没有限制.

可用 =If-Match= 头指定一个从0开始计数的索引号, 以实现乐观并发策略:
当追加数据时的位置与指定的索引号不符时, 返回412错误.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request POST \
  --data "$EVENT" \
  "http://localhost:8080/estore/$namespace/items/$id/events"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}/events`, {
  method: 'POST'
, body: event
})
#+END_SRC

**** get event
=GET /estore/<namespace>/items/<id>/events/<index>=

根据事件的索引获得特定事件的JSON, 返回200或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore/$namespace/items/$id/events/$index"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}/events/$index`)
#+END_SRC

**** get events
=GET /estore/<namespace>/items/<id>/events=

按JSON数组结构返回项目内的所有事件, 返回200或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}`)
#+END_SRC

**** get size
=GET /estore/<namespace>/items/<id>/size=

获得指定项目内包含的事件数量, 该值等同于下一个事件插入时的索引号.
对于不存在的项目, 它会返回0.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore/$namespace/items/$id/size"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}/size`)
#+END_SRC

**** has
=HEAD /estore/<namespace>/items/<id>=

检测指定项目是否存在, 返回204或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request HEAD \
  "http://localhost:8080/estore/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}`, {
  method: 'HEAD'
})
#+END_SRC

**** delete
=DELETE /estore/<namespace>/items/<id>=

删除特定项目, 返回204或404.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/estore/$namespace/items/$id"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items/${id}`, {
  method: 'DELETE'
})
#+END_SRC

**** clear
=DELETE /estore/<namespace>=

清空estore内的所有items.

***** Example
****** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  "http://localhost:8080/estore/$db"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${db}`, {
  method: 'DELETE'
})
#+END_SRC

**** get all item ids
=GET /estore/<namespace>/items=

获取所有项目的id, 返回 =string[]=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore/$namespace/items"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore/${namespace}/items`).then(res => res.json())
#+END_SRC

**** get all namespaces
=GET /estore=

列出所有的namespaces.

输出JSON =Array<string>=.

此操作支持返回[[https://github.com/ndjson/ndjson-spec][ndjson]]格式的响应, 需要 =Accept: application/x-ndjson= 请求头.

***** Example
****** curl
#+BEGIN_SRC sh
curl 'http://localhost:8080/estore'
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch('http://localhost:8080/estore').then(res => res.json())
#+END_SRC

**** stats
=GET /estore/<namespace>/stats=

输出JSON:
#+BEGIN_SRC typescript
{
  namespace: string
  items: number
}
#+END_SRC

***** Example
****** curl
#+BEGIN_SRC sh
curl "http://localhost:8080/estore"
#+END_SRC

****** JavaScript
#+BEGIN_SRC js
await fetch(`http://localhost:8080/estore`).then(res => res.json())
#+END_SRC

*** Private
**** JSON Schema验证
通过设置环境变量 =ESTORE_JSON_VALIDATION=true= 可开启append的JSON Schema验证功能.

在开启验证功能的情况下, 通过环境变量 =ESTORE_DEFAULT_JSON_SCHEMA= 可设置默认的JSON Schema.

***** 为EStore单独设置JSON Schema
****** 获取所有具有JSON Schema的namespace
=GET /admin/estore-with-json-schema=

获取所有具有JSON Schema的namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore-with-json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/estore-with-json-schema', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取JSON Schema
=GET /admin/estore/<namespace>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/json-schema`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置JSON Schema
=PUT /admin/estore/<namespace>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$JSON_SCHEMA" \
  "http://localhost:8080/admin/estore/$namespace/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/json-schema`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
    'Content-Type': 'application/json'
  }
, body: JSON.stringify(jsonSchema)
})
#+END_SRC

****** 移除JSON Schema
=DELETE /admin/estore/<namespace>/json-schema=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/json-schema"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/json-schema`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

**** 访问控制
EStore提供两种可以同时启用的访问控制策略.

所有访问控制API都使用基于口令的Bearer Token Authentication.
口令需通过环境变量 =ESTORE_ADMIN_PASSWORD= 进行设置.

访问控制规则是通过[[https://www.sqlite.org/wal.html][WAL模式]]的SQLite3持久化的, 开启访问控制后,
服务器的吞吐量和响应速度会受到硬盘性能的影响.

已经打开的连接不会受到新的访问控制规则的影响.

***** 基于名单的访问控制
通过设置环境变量 =ESTORE_LIST_BASED_ACCESS_CONTROL= 开启基于名单的访问控制:
- =whitelist=
  启用基于EStore白名单的访问控制, 只有在名单内的EStore允许被访问.
- =blacklist=
  启用基于EStore黑名单的访问控制, 只有在名单外的EStore允许被访问.

****** 黑名单
******* 获取黑名单
=GET /admin/blacklist=

获取位于黑名单中的所有namespace, 返回JSON表示的字符串数组 =string[]=.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/blacklist"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/blacklist', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

******* 添加黑名单
=PUT /admin/blacklist/<namespace>=

将特定namespace加入黑名单.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/blacklist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/blacklist/${namespace}`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

******* 移除黑名单
=DELETE /admin/blacklist/<namespace>=

将特定namespace从黑名单中移除.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/blacklist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/blacklist/${namespace}`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 白名单
******* 获取白名单
=GET /admin/whitelist=

获取位于黑名单中的所有namespace, 返回JSON表示的字符串数组 =string[]=.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIM_PASSWORD" \
  "http://localhost:8080/admin/whitelist"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/whitelist', {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

******* 添加白名单
=PUT /admin/whitelist/<namespace>=

将特定namespace加入白名单.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/whitelist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/whitelist/${namespace}`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

******* 移除白名单
=DELETE /admin/whitelist/<namespace>=

将特定namespace从白名单中移除.

******** Example
********* curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/whitelist/$namespace"
#+END_SRC

********* fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/whitelist/${namespace}`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

***** 基于token的访问控制
对token的要求: =^[a-zA-Z0-9\.\-_]{1,256}$=

通过设置环境变量 =ESTORE_TOKEN_BASED_ACCESS_CONTROL=true= 开启基于token的访问控制.

基于token的访问控制将根据消息队列的token access policy决定其访问规则.
可通过环境变量 =ESTORE_WRITE_TOKEN_REQUIRED=, =ESTORE_READ_TOKEN_REQUIRED=,
=ESTORE_DELETE_TOKEN_REQUIRED= 设置相关默认值,
未设置情况下为 =false=.

一个消息队列可以有多个token, 每个token可以单独设置write和read权限, 不同消息队列的token不共用.

基于token的访问控制作出了以下假设
- token的传输过程是安全的
- token难以被猜测
- token的意外泄露可以被迅速处理

****** 获取所有具有token策略的namespace
=GET /admin/estore-with-token-policies=

获取所有具有token策略的namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore-with-token-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch('http://localhost:8080/admin/estore-with-token-policies')
#+END_SRC

****** 获取特定namespace的token策略
=GET /admin/estore/<namespace>/token-policies=

返回JSON:
#+BEGIN_SRC typescript
{
  writeTokenRequired: boolean | null
  readTokenRequired: boolean | null
  deleteTokenRequired: boolean | null
}
#+END_SRC
=null= 代表沿用相关默认值.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/token-policies"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fethc(`http://localhost:8080/admin/estore/${namespace}/token-policies`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 设置token策略
=PUT /admin/estore/<namespace>/token-policies/write-token-required=
=PUT /admin/estore/<namespace>/token-policies/read-token-required=
=PUT /admin/estore/<namespace>/token-policies/delete-token-required=

Payload必须是一个布尔值.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  --header "Content-Type: application/json" \
  --data "$WRITE_TOKEN_REQUIRED" \
  "http://localhost:8080/admin/estore/$namespace/token-policies/write-token-required"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/token-policies/write-token-required`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  , 'Content-Type': 'application/json'
  }
, body: JSON.stringify(writeTokenRequired)
})
#+END_SRC

****** 移除token策略
=DELETE /admin/estore/<namespace>/token-policies/write-token-required=
=DELETE /admin/estore/<namespace>/token-policies/read-token-required=
=DELETE /admin/estore/<namespace>/token-policies/delete-token-required=

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/token-policies/write-token-required"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/token-policies/write-token-required`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 获取所有具有token的namespace
=GET /admin/estore-with-tokens=

获取所有具有token的namespace, 返回由JSON表示的字符串数组 =string[]=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore-with-tokens"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore-with-tokens`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 获取特定namespace的所有token信息
=GET /admin/estore/<namespace>/tokens=

获取特定namespace的所有token信息, 返回JSON表示的token信息数组
=Array<{ token: string, write: boolean, read: boolean, delete: boolean }>=.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/tokens"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/tokens`, {
  headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
}).then(res => res.json())
#+END_SRC

****** 为特定namespace的token设置write权限
=PUT /admin/estore/<namespace>/tokens/<token>/write=

添加/更新token, 为token设置write权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/tokens/$token/log"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/tokens/${token}/log`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定namespace的token的write权限
=DELETE /admin/estore/<namespace>/tokens/<token>/write=

取消token的read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/tokens/$token/write"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/tokens/${token}/write`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 为特定namespace的token设置read权限
=PUT /admin/estore/<namespace>/tokens/<token>/read=

添加/更新token, 为token设置read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/tokens/$token/read"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/tokens/${token}/read`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定namespace的token的read权限
=DELETE /admin/estore/<namespace>/tokens/<token>/read=

取消token的read权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/tokens/$token/read"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace>/tokens/${token}/delete`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 为特定namespace的token设置delete权限
=PUT /admin/estore/<namespace>/tokens/<token>/delete=

添加/更新token, 为token设置delete权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request PUT \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/tokens/$token/delete"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/tokens/${token}/delete`, {
  method: 'PUT'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

****** 取消特定namespace的token的delete权限
=DELETE /admin/estore/<namespace>/tokens/<token>/delete=

取消token的delete权限.

******* Example
******** curl
#+BEGIN_SRC sh
curl \
  --request DELETE \
  --header "Authorization: Bearer $ADMIN_PASSWORD" \
  "http://localhost:8080/admin/estore/$namespace/tokens/$token/delete"
#+END_SRC

******** fetch
#+BEGIN_SRC js
await fetch(`http://localhost:8080/admin/estore/${namespace}/tokens/${token}/delete`, {
  method: 'DELETE'
, headers: {
    'Authorization': `Bearer ${adminPassword}`
  }
})
#+END_SRC

** HTTP/2
EStore支持HTTP/2, 以多路复用反向代理时的连接, 可通过设置环境变量 =ESTORE_HTTP2=true= 开启.

此HTTP/2支持不提供从HTTP/1.1自动升级的功能, 亦不提供HTTPS.
因此, 在本地curl里进行测试时, 需要开启 =--http2-prior-knowledge= 选项.

** 限制Payload大小
设置环境变量 =ESTORE_PAYLOAD_LIMIT= 可限制服务接受的单个请求的Payload字节数, 默认值为1048576(1MB).

设置环境变量 =ESTORE_APPEND_PAYLOAD_LIMIT= 可限制append接受的单个请求的Payload字节数,
默认值继承自 =ESTORE_PAYLOAD_LIMIT=.
